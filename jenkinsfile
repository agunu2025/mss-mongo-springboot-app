node {
     def buildNumber = BUILD_NUMBER
     def mvnHome = tool 'maven-build'

    stage ("checkout")  {
    git credentialsId: 'git-authentication-jenkins-login', url: 'https://github.com/agunu2025/mss-mongo-springboot-app.git'
    }


  stage ('build')  {
    sh "${mvnHome}/bin/mvn clean install "
    }

    stage('Build Docker Image'){
        sh "docker build . -t agunu2025/mss-mongodb-app:${buildNumber}"
    }

     stage('Push Docker Image'){
         withCredentials([string(credentialsId: 'dockerAuthenticationpublic', variable: 'dockerAuthenticationpublic')])  {
          sh "docker login -u agunu2025 -p ${dockerAuthenticationpublic}"
        }
        sh "docker push agunu2025/mss-mongodb-app:${buildNumber} "
     }

      stage("Deploy To plab02"){
      sh "chmod +x global.yml docker-compose-plab02.yml  "
      sshagent(['aws-private-key-connection']) {
       sh "scp -o StrictHostKeyChecking=no global.yml docker-compose-plab02.yml  ec2-user@3.138.158.136:/home/ec2-user/"
       sh 'docker-compose -f global.yml -f docker-compose-qlab02.yml  up -d '
       sh 'rm -rf global.yml docker-compose-qlab02.yml '
       }
      }

      stage("Deploy To qlab02"){
      sshagent(['SSH_PRIVATE_KEY_docker']) {
        sh "scp -o StrictHostKeyChecking=no global.yml docker-compose-qlab02.yml  ec2-user@3.138.158.137:/home/ec2-user/"
       }
       sh "ssh -o StrictHostKeyChecking=no ec2-user@3.141.10.50"
       sh "ssh ec2-user@3.141.10.50 docker-compose -f global.yml -f docker-compose-qlab02.yml  up "
      }

}

stage("docker push"){
    steps{
        script{
            withCredentials([string(credentialsId: 'nexus_docker_password_generated', variable: 'nexus_docker_password_generated')]) {
                     sh '''
                        docker login -u admin -p $nexus_docker_password_generated 34.125.88.86:8085
                        docker push  34.125.88.86:8085/mss-app:${VERSION}
                        docker rmi 34.125.88.86:8085/mss-app:${VERSION}
                    '''
            }
        }
    }
}
stage("pushing the helm charts to nexus"){
    steps{
        script{
            withCredentials([string(credentialsId: 'nexus_docker_password_generated', variable: 'nexus_docker_password_generated')]) {
                  dir('kubernetes/') {
                     sh '''
                         helmversion=$( helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                         tar -czvf  myapp-${helmversion}.tgz myapp/
                         curl -u admin:$nexus_docker_password_generated http://34.125.88.86:8081/repository/mss-helm-package/ --upload-file myapp-${helmversion}.tgz -v
                    '''
                  }
            }
        }
    }
}
stage('Deploying application on k8s cluster') {
    steps {
       script{
          withCredentials([kubeconfigFile(credentialsId: 'kubernetes-configuration', variable: 'KUBECONFIG')])   {
                dir('kubernetes/') {
                  sh 'helm upgrade --install --set image.repository="34.125.88.86:8085/mss-app" --set image.tag="${VERSION}" myjavaapp myapp/ '
                }
            }
       }
    }
}
stage('verifying app deployment'){
    steps{
        script{
             withCredentials([kubeconfigFile(credentialsId: 'kubernetes-configuration', variable: 'KUBECONFIG')])  {
                 sh 'kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- curl myjavaapp-myapp:8080'

             }
        }
    }
}
}

post {
always {
mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "deekshith.snsep@gmail.com";
}
