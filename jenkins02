pipeline{
    agent any
      environment{
             VERSION = "${env.BUILD_ID}"
             def mvnHome = tool 'maven-build'
            }
  stages{
      stage("cloneRepository"){
          steps{
              git branch: 'mss-mongodb', url: 'https://github.com/agunu2025/mss-mongo-springboot-app.git'
               }
            }
      stage("build maven Packages"){
           steps{
               sh "${mvnHome}/bin/mvn clean package "
                 }
               }
        stage("docker build"){
            steps{
                 sh 'docker build -t 34.125.127.76:8085/gradle-hosted-8085:${VERSION} .'
                 }
             }
        stage("docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus_docker_password_generated', variable: 'nexus_docker_password_generated')]) {
                             sh '''
                                docker login -u admin -p $nexus_docker_password_generated 34.125.127.76:8085
                                docker push  34.125.127.76:8085/gradle-hosted-8085:${VERSION}
                                docker rmi 34.125.127.76:8085/gradle-hosted-8085:${VERSION}
                            '''
                    }
                }
            }
        }
        stage("pushing the helm charts to nexus"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus_docker_password_generated', variable: 'nexus_docker_password_generated')]) {
                          dir('mss-kpm/') {
                             sh '''
                                 helmversion=$( helm show chart mongodb-app | grep version | cut -d: -f 2 | tr -d ' ')
                                 tar -czvf  mongodb-app-${helmversion}.tgz mongodb-app/
                                 curl -u admin:$nexus_docker_password_generated http://34.125.127.76:8081/repository/gradle-helm-package/ --upload-file mongodb-app-${helmversion}.tgz -v
                            '''
                          }
                    }
                }
            }
        }
        stage('Deploying application on k8s cluster') {
            steps {
               script{
                  withCredentials([kubeconfigFile(credentialsId: 'kubernetes-configuration', variable: 'KUBECONFIG')])   {
                        dir('mss-kpm/') {
                          sh 'helm upgrade --install --set image.repository="34.125.127.76:8085/gradle-hosted-8085" --set image.tag="${VERSION}" java-web-app mongodb-app/ '
                        }
                    }
               }
            }
        }
        stage('verifying app deployment'){
             steps{
                script{
                   withCredentials([kubeconfigFile(credentialsId: 'kubernetes-configuration', variable: 'KUBECONFIG')])  {
                       sh 'kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- curl myjavaapp-mongodb-app:8080'
                     }
                }
            }
        }
    }
}
